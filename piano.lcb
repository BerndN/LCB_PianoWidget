
-- declaring extension as widget, followed by identifier
widget community.livecode.widget.piano

-- dependancy declarations
use com.livecode.canvas
use com.livecode.string
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "1OctavePiano"
metadata author is "Paul McClernan"
metadata version is "0.1"
metadata preferredSize is "96,72"
-- metadata iconPath is
metadata svgicon is "M0,0v69.6c0,1.4,1.1,2.5,2.4,2.5h9.7c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1 c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.7 c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.7c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1H94c1.3,0,2.4-1.1,2.4-2.5V0H0z M95.4,69.6c0,0.8-0.6,1.5-1.4,1.5h-9.8c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1L95.4,69.6z M80.4,71.1h-9.7 c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.6v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C81.8,70.4,81.2,71.1,80.4,71.1z M57,71.1c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7c0,0.8-0.6,1.5-1.4,1.5 L57,71.1z M53.1,71.1h-9.8c-0.8,0-1.4-0.7-1.4-1.5V1H50v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C54.5,70.4,53.8,71.1,53.1,71.1z M28.3,69.6V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1v68.6c0,0.8-0.6,1.5-1.4,1.5h-9.8C28.9,71.1,28.3,70.4,28.3,69.6z M14.7,69.6V46.9 h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.6l0,0v0.3c0,1.1,0.9,2,1.9,2h2.5v22.7c0,0.8-0.6,1.5-1.4,1.5H16C15.3,71.1,14.7,70.4,14.7,69.6z M12.1,71.1H2.4c-0.8,0-1.4-0.7-1.4-1.5V1h8.1v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C13.5,70.4,12.9,71.1,12.1,71.1z"

private variable mColor as Color
private variable mHiliteColor as Color
private variable mPresets as List

private variable mBlackKeysList as List
private variable mWhiteKeysList as List
private variable mBackgroundPath as Path

private variable mMaintainAspectRatio as Boolean

property iconHiliteColor      get getHiliteColor    set setHiliteColor
metadata iconHiliteColor.editor is "com.livecode.pi.color"
metadata iconPath.editor is "com.livecode.pi.text"

property maintainAspectRatio  get mMaintainAspectRatio   set mMaintainAspectRatio
--------------------------------------------------------------------------------------------------------------
--- called when widget is created
public handler OnCreate()

	put path "M0,0v69.6c0,1.4,1.1,2.5,2.4,2.5h9.7c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.8 c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,2-1.1 c0.4,0.7,1.1,1.1,2,1.1h9.7c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.7c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1H94 c1.3,0,2.4-1.1,2.4-2.5V0H0z" into mBackgroundPath
	put color [0,0,0] into mColor
	put stringToColor("127,0,0") into mHiliteColor

	put false into mMaintainAspectRatio
	put the empty list into mPresets

	variable tArray as Array
	put the empty array into tArray
	--------------------------------------------White Keys--------------------------------------------

	put "C" into tArray["name"]
	put path "M12.1,71.1H2.4c-0.8,0-1.4-0.7-1.4-1.5V1h8.1v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7 C13.5,70.4,12.9,71.1,12.1,71.1z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList

	put "D" into tArray["name"]
	put path "M14.7,69.6V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.6l0,0v0.3c0,1.1,0.9,2,1.9,2h2.5v22.7 c0,0.8-0.6,1.5-1.4,1.5H16C15.3,71.1,14.7,70.4,14.7,69.6z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList

	put  "E" into tArray["name"]
	put path "M28.3,69.6V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1v68.6c0,0.8-0.6,1.5-1.4,1.5h-9.8 C28.9,71.1,28.3,70.4,28.3,69.6z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList

	put "F" into tArray["name"]
	put path "M53.1,71.1h-9.8c-0.8,0-1.4-0.7-1.4-1.5V1H50v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7 C54.5,70.4,53.8,71.1,53.1,71.1z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList

	put "G" into tArray["name"]
	put path "M57,71.1c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7 c0,0.8-0.6,1.5-1.4,1.5L57,71.1z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList

	put "A" into tArray["name"]
	put path "M80.4,71.1h-9.7c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.6v43.9c0,1.1,0.9,2,1.9,2h2.5 v22.7C81.8,70.4,81.2,71.1,80.4,71.1z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList

	put "B" into tArray["name"]
	put path "M95.4,69.6c0,0.8-0.6,1.5-1.4,1.5h-9.8c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1 L95.4,69.6z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mWhiteKeysList
   --------------------------------------------Black Keys--------------------------------------------
	put "C#Db" into tArray["name"]
	put path "M19.1,0v44.6c0,1.1-0.9,2-1.9,2H11c-1,0-1.9-0.9-1.9-2V0H19.1z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mBlackKeysList

	put "D#Eb" into tArray["name"]
	put path "M32.7,0v44.6c0,1.1-0.9,2-1.9,2h-6.2c-1,0-1.9-0.9-1.9-2V0H32.7z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mBlackKeysList

	put "F#Gb" into tArray["name"]
	put path "M60,0v44.6c0,1.1-0.9,2-1.9,2h-6.2c-1,0-1.9-0.9-1.9-2V0H60z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mBlackKeysList

	put "G#Ab" into tArray["name"]
	put path "M73.7,0v44.6c0,1.1-0.9,2-1.9,2h-6.2c-1,0-1.9-0.9-1.9-2V0H73.7z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mBlackKeysList

	put "A#Bb" into tArray["name"]
	put path "M87.3,0v44.6c0,1.1-0.9,2-1.9,2h-6.2c-1,0-1.9-0.9-1.9-2V0H87.3z" into tArray["path"]
	put false into tArray["hilighted"]
	push tArray onto mBlackKeysList

end handler
-- called whenever LiveCode needs to redraw the widget
public handler OnPaint()
	variable tPath as Path
 	variable tPathC as Path
	variable tWhiteKey as Array
	variable tBlackKey as Array
	--transform tPath by scaleAndMaintainAspectRatioTransform(the bounding box of tPath, my bounds)
	------------------------------------------------------------------------------------------ Background -----------------------------------------------------------------------------------------
	set the paint of this canvas to solid paint with color [0,0,0,1]
	put mBackgroundPath into tPath
	scale tPath by [my width / the width of the bounding box of tPath, my height / the height of the bounding box of tPath]
	fill tPath on this canvas
	------------------------------------------------------------------------------------------ WhiteKeys ------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------ C
	put element 1 of mWhiteKeysList into tWhiteKey
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.99, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	fill tPath on this canvas
	put tWhiteKey into element 1 of mWhiteKeysList
	------------------------------------------------------------------------------------------------------------------ D
	put element 2 of mWhiteKeysList into tWhiteKey
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.985, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	put tWhiteKey into element 2 of mWhiteKeysList
	fill tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ E
	put element 3 of mWhiteKeysList into tWhiteKey
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.985, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	put tWhiteKey into element 3 of mWhiteKeysList
	fill tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ F
	put element 4 of mWhiteKeysList into tWhiteKey
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.99, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	put tWhiteKey into element 4 of mWhiteKeysList
	fill tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ G
	put element 5 of mWhiteKeysList into tWhiteKey
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.979, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	put tWhiteKey into element 5 of mWhiteKeysList
	fill tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ A
	put element 6 of mWhiteKeysList into tWhiteKey
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.975, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	put tWhiteKey into element 6 of mWhiteKeysList
	fill tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ B
	if tWhiteKey["hilighted"] then
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put element 7 of mWhiteKeysList into tWhiteKey
	put tWhiteKey["path"] into tPath
	scale tPath by [(my width /7.51) / (the width of the bounding box of tPath)*0.982, (my height / the height of the bounding box of tPath)*0.975]
	put tPath into tWhiteKey["path"]
	put tWhiteKey into element 7 of mWhiteKeysList
	fill tPath on this canvas
	------------------------------------------------------------------------------------------ Black Keys ------------------------------------------------------------------------------------------
	set the paint of this canvas to solid paint with color [0,0,0]
	------------------------------------------------------------------------------------------------------------------ C#Db
	put element 1 of mBlackKeysList into tBlackKey
	put tBlackKey["path"] into tPath
	scale tPath by [(my width /10) / (the width of the bounding box of tPath)*1.04, (my height / the height of the bounding box of tPath)*0.656]
	fill tPath on this canvas
	put tBlackKey into element 1 of mBlackKeysList
	------------------------------------------------------------------------------------------------------------------ D#Eb
	put element 2 of mBlackKeysList into tBlackKey
	put tBlackKey["path"] into tPath
	scale tPath by [(my width /10) / (the width of the bounding box of tPath)*1.05, (my height / the height of the bounding box of tPath)*0.656]
	fill tPath on this canvas
	put tBlackKey into element 2 of mBlackKeysList
	------------------------------------------------------------------------------------------------------------------ F#Gb
	put element 3 of mBlackKeysList into tBlackKey
	put tBlackKey["path"] into tPath
	scale tPath by [(my width /10) / (the width of the bounding box of tPath)*1.04, (my height / the height of the bounding box of tPath)*0.656]
	fill tPath on this canvas
	put tBlackKey into element 3 of mBlackKeysList
	------------------------------------------------------------------------------------------------------------------ G#Ab
	put element 4 of mBlackKeysList into tBlackKey
	put tBlackKey["path"] into tPath
	scale tPath by [(my width /10) / (the width of the bounding box of tPath)*1.04, (my height / the height of the bounding box of tPath)*0.656]
	fill tPath on this canvas
	put tBlackKey into element 4 of mBlackKeysList
	------------------------------------------------------------------------------------------------------------------ A#Bb
	put element 5 of mBlackKeysList into tBlackKey
	put tBlackKey["path"] into tPath
	scale tPath by [(my width /10) / (the width of the bounding box of tPath)*1.04, (my height / the height of the bounding box of tPath)*0.656]
	fill tPath on this canvas
	put tBlackKey into element 5 of mBlackKeysList

	--set the paint of this canvas to solid paint with color [1,1,1,1]
	--fill this canvas

end handler
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as Array)
	--put the empty array into rProperties
	--put mBackgroundPath into rProperties["svg path"]
	put colorToString(mColor, true) into rProperties["color"]
	--put colorToString(mHiliteColor, true) into rProperties["hilite color"]
	--put mHilited into rProperties["hilited"]
	--put mToggleHilite into rProperties["toggle hilite"]
	--put mMaintainAspectRatio into rProperties["maintain aspect ratio"]
	--put mFlipVertically into rProperties["flip vertically"]
	--put mAngle into rProperties["angle"]
	-- return rProperties
end handler
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as Array)
	--put pProperties["svg path"] into mBackgroundPath
	put stringToColor(pProperties["color"]) into mColor
   put stringToColor(pProperties["hilite color"]) into mHiliteColor
	--put pProperties["hilited"] into mHilited
	--put pProperties["toggle hilite"] into mToggleHilite
	--put pProperties["maintain aspect ratio"] into mMaintainAspectRatio
	--put pProperties["flip vertically"] into mFlipVertically
	--put pProperties["angle"] into mAngle
end handler
----------------------------------------------------------------------------------------------------
public handler OnMouseUp()
  -- if the current mouse position is within my bounds then
  --	if mToggleHilite then
 --	  	put not mHilited into mHilited
  -- 	end if
    post "mouseUp" to my script object with [the click button]
 --  end if
  -- redraw all
end handler

public handler OnMouseCancel()
	--put "up" into mState
	redraw all
end handler

public handler OnMouseDown()
	-- variable tXMousePos as Real
	-- variable tYMousePos as Real
	-- variable tReturnStr as String
	variable tBlackKey as Array
	variable tWhiteKey as Array
	variable tPath as Path
	-- variable tCanvas as Canvas
	-- variable tColor as Color
	put element 1 of mWhiteKeysList into tWhiteKey
	put tWhiteKey["path"] into tPath
	if hitTestPath( the mouse position, tPath, 0, true) then
		put true into tWhiteKey["hilighted"]
   	put tWhiteKey into element 1 of mWhiteKeysList
		post "noteOn" to my script object with [ 0 ,tWhiteKey["name"]]
		redraw all
	end if
	--put the x of the mouse position into tXMousePos
	--put the y of the mouse position into tYMousePos
	--if tYMousePos < 0 then
	--	put 0 into tYMousePos
	--end if
	-- put tXMousePos formatted as string & "," & tYMousePos formatted as string into tReturnStr
	post "mouseDown" to my script object with [the click button]
end handler

public handler OnMouseMove() returns optional any
	variable tXMousePos as Real
	variable tYMousePos as Real
	variable tReturnStr as String
	put the x of the mouse position into tXMousePos
	put the y of the mouse position into tYMousePos
	if tYMousePos < 0 then
		put 0 into tYMousePos
	end if
	put tXMousePos formatted as string & "," & tYMousePos formatted as string into tReturnStr
	post "mouseMove" && tReturnStr
end handler
----------------------------------------------------------------------------------------------------

public handler setMaintainAspectRatio(in pBoolean as Boolean)
	put pBoolean into mMaintainAspectRatio
	redraw all
end handler

public handler setColor(in pColor as String) returns nothing
	put stringToColor(pColor) into mColor
	redraw all
end handler

public handler getColor() returns String
	return colorToString(mColor, false)
end handler

public handler setHiliteColor(in pColor as String) returns nothing
	put stringToColor(pColor) into mHiliteColor
	redraw all
end handler

public handler getHiliteColor() returns String
	return colorToString(mHiliteColor, false)
end handler

--- Monte's point-within-path handler:
public handler hitTestPath(in pPoint as Point, in pPath as Path, in pStrokeWidth as Number, in pWithin as Boolean) returns Boolean
	-- set pWithin true and pStrokeWidth to 0 if you want to hit-test the filled path
	-- set pWithin false and pStrokeWidth != 0 if you want hit-test the stroked path (i.e. just the outline)
	-- set pWithin true and pStrokeWidth != 0 if you want to hit-test the stroked and filled path.
	------------------------------------------------------------------------------------------------------------------------------
	-- create a 1 x 1 canvas
	variable tCanvas as Canvas
	put a new canvas with size [1,1] into tCanvas
	-- ensure we either get pixels drawn with our color or not drawn
	set the antialias of tCanvas to false
	-- translate the path by the point
	translate pPath by [-(the x of pPoint), -(the y of pPoint)]
	-- draw the path to the canvas
	set the paint of tCanvas to solid paint with color [0.0, 0.0, 0.0, 1.0]
	if pStrokeWidth is 0 and not pWithin then
		put 1 into pStrokeWidth
	end if
	if pWithin then
		fill pPath on tCanvas
	end if
	if pStrokeWidth > 0 then
		set the stroke width of tCanvas to pStrokeWidth
		stroke pPath on tCanvas
	end if
	-- get the pixel data of the canvas
	variable tData as Data
	put the pixel data of tCanvas into tData
	-- return whether pixel is opaque
	return the first byte of tData is the byte with code 255
end handler


public handler hitRectsTests()
	variable tPathC as Path
	------------------------------------------------------------------------------------------ Hit Rects ------------------------------------------------------------------------------------------
	--C--
	set the paint of this canvas to solid paint with color [0,0,1,0.5]
	put rectangle path of rectangle [my width / 7 * 0.05 , my height /1.52 , my width / 7 , my height] into tPathC
	fill tPathC on this canvas
	--C-upper--
	set the paint of this canvas to solid paint with color [0,0,1,0.25]
	put rectangle path of rectangle [(my width / 10) * 0.03 , 0 , (my width / 10) * 0.98 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--D--
	set the paint of this canvas to solid paint with color [0,1,1,0.5]
	put rectangle path of rectangle [(my width / 7) * 2, my height / 1.52 , (my width / 7) * 1.1 , my height] into tPathC
	fill tPathC on this canvas
	--D-upper--
	set the paint of this canvas to solid paint with color [0.2,0.7,0.1,0.5]
	put rectangle path of rectangle [(my width / 10) * 2 , 0 , (my width / 10) * 2.4 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--E--
	set the paint of this canvas to solid paint with color [1,0,0,0.5]
	put rectangle path of rectangle [(my width / 7) * 3, my height / 1.52 , (my width / 7) * 2.05 , my height] into tPathC
	fill tPathC on this canvas
	--E-upper--
	set the paint of this canvas to solid paint with color [0.2,0.7,0.1,0.5]
	put rectangle path of rectangle [(my width / 10) * 3.45 , 0 , (my width / 10) * 4.3 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--F--
	set the paint of this canvas to solid paint with color [1,1,0,0.5]
	put rectangle path of rectangle [(my width / 7) * 4, my height / 1.52 , (my width / 7) * 3.05 , my height] into tPathC
	fill tPathC on this canvas
	--F-upper--
	set the paint of this canvas to solid paint with color [0.2,0.7,0.1,0.5]
	put rectangle path of rectangle [(my width / 10) * 4.35 , 0 , (my width / 10) * 5.2 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--G--
	set the paint of this canvas to solid paint with color [1,0,1,0.5]
	put rectangle path of rectangle [(my width / 7) * 5, my height / 1.52 , (my width / 7) * 4.05 , my height] into tPathC
	fill tPathC on this canvas
	--G-upper--
	set the paint of this canvas to solid paint with color [0.2,0.7,0.1,0.5]
	put rectangle path of rectangle [(my width / 10) * 6.24 , 0 , (my width / 10) * 6.65 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--A--
	set the paint of this canvas to solid paint with color [0.5,0,0.5,0.5]
	put rectangle path of rectangle [(my width / 7) * 6, my height / 1.52 , (my width / 7) * 5.04 , my height] into tPathC
	fill tPathC on this canvas
	--A-upper--
	set the paint of this canvas to solid paint with color [0.2,0.7,0.1,0.5]
	put rectangle path of rectangle [(my width / 10) * 7.65 , 0 , (my width / 10) * 8.05 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--B--
	set the paint of this canvas to solid paint with color [0.5,0.5,0.5,0.5]
	put rectangle path of rectangle [(my width / 7) * 7, my height / 1.52 , (my width / 7) * 6.02 , my height] into tPathC
	fill tPathC on this canvas
	--B-upper--
	set the paint of this canvas to solid paint with color [0.2,0.7,0.1,0.5]
	put rectangle path of rectangle [(my width / 10) * 9.07 , 0 , (my width / 10) * 9.95 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--C#Db--
	set the paint of this canvas to solid paint with color [0.1,0.5,1,0.7]
	put rectangle path of rectangle [(my width / 10) * .95 , 0 , (my width / 10) *2 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--D#Eb--
	set the paint of this canvas to solid paint with color [0.1,0.5,1,0.7]
	put rectangle path of rectangle [(my width / 10) * 2.39 , 0 , (my width / 10) *3.45 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--F#Gb--
	set the paint of this canvas to solid paint with color [0.1,0.5,1,0.7]
	put rectangle path of rectangle [(my width / 10) * 5.2 , 0 , (my width / 10) *6.25 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--G#Ab--
	set the paint of this canvas to solid paint with color [0.1,0.5,1,0.7]
	put rectangle path of rectangle [(my width / 10) * 6.63 , 0 , (my width / 10) *7.65 , my height * 0.66] into tPathC
	fill tPathC on this canvas
	--A#Bb--
	set the paint of this canvas to solid paint with color [0.1,0.5,1,0.7]
	put rectangle path of rectangle [(my width / 10) * 8.04 , 0 , (my width / 10) *9.09 , my height * 0.66] into tPathC
	fill tPathC on this canvas
end handler

end widget
